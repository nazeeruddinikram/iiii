#!/bin/bash
#   _  _  _  _ 
#  (_)(_)(_)(_)
#  | || || || |
#  | || || || |
#  |_||_||_||_|
#
#    irc it, immensely improved
#    a wrapper for ii and tmux
#    written by thomas berryhill <tb01110100@gmail.com>
#    under the mit license

source ~/.ii/config || { echo "config file ~/.ii/config not found, aborting" >&2; exit 1; }

case "$1" in
  -h|--help|help|"")
    cat << EOF

iiii 0.2
written by tb01110100

usage: iiii [help|start|stop|view]

EOF
    exit ;;
  start)
    for network in "${autoconnect[@]}"; do
      "$network"
      while true; do
        rm "$iidir/$host/in"
        echo "connecting to $host"
        ii -i "$iidir" -s "$host" -p "$port" -n "$nick" &
        iipid="$!"
        until [[ -p "$iidir/$host/in" ]]; do sleep .2; done
        echo "successfully connected to $host"
        if [[ -n "$nickpass" ]]; then
          echo "attempting to identify to ${host}'s nickserv"
          echo "/j nickserv identify $nickpass" > "$iidir/$host/in"
          sleep 10
        fi
        echo "joining channels: ${autojoins[*]}"
        printf "/j %s\n" "${autojoins[@]}" > "$iidir/$host/in"
        wait "$iipid"
        echo "connection to $host lost, attempting to reconnect"
      done &
      unset host port autojoins nick nickpass
      nick="$(whoami)"
    done
    wait
    exit ;;
  stop)
    killall ii
    exit ;;
  view|v)
    [[ -z "$TMUX" ]] && { echo "please run this in a tmux session" >&2; exit 1; }
    shift 1
    $1
    [[ "$(tmux display-message -p \#S)" != "ii" ]] && tmux rename-session ii
    tmux set status on 
    tmux set status-position top
    tmux set status-bg black
    tmux set status-fg yellow
    tmux set status-left ""
    tmux set status-right ""
    tmux set status-justify centre
    tmux set mouse-select-window on
    tmux set pane-border-style fg=yellow
    tmux set pane-active-border-style fg=yellow
    tmux rename-window "$2"
    tmux split-window -l 2 "$0 m $1 \\$2"
    clear
    # buckle your seatbelts, ladies and gentlemen
    tail -f -n 100 ~/.ii/"$host"/"$2"/out | sed -u \
      -e 's/[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\} \([0-9]\{2\}:[0-9]\{2\}\)/\1/g' \
      -e 's/<\([^>]*\)>/\x1b[0;33m\1>\x1b[0m/' \
      -e "s/$nick/\x1b[0;34m&\x1b[0m/g" \
      -e "s/^\([0-9]\{2\}:[0-9]\{2\} \)\x1b\[0;33m\(.*\)>\x1b\[0m\(.*\)\x1b\[0;34m$nick\x1b\[0m\(.*\)/\1\x1b[30;43m\2\x1b[0m>\3$nick\4/" \
      -e 's/ACTION \(.*\)/\x1b[1;33m*\1*\x1b[0m/' \
    | while read -r ln; do printf \\n%s "$ln"; done ;;
  message|m)
    shift 1
    $1
    color='\e[0;33m' # yellow
    endcolor='\e[0m'
    while true; do
      history -c
      history -r ~/.ii/"$host"/"$2"/in-history
      clear
      echo -e "${color}serv: $host  |  chan: $2  |  nick: $nick${endcolor}"
      read -ep " >  " input_text
      echo "$input_text" | tee -a ~/.ii/"$host"/"$2"/in-history ~/.ii/"$host"/"$2"/in >/dev/null
    done ;;
esac
