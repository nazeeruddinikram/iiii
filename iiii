#!/bin/bash
#   _  _  _  _ 
#  (_)(_)(_)(_)
#  | || || || |
#  | || || || |
#  |_||_||_||_|
#
#    irc it, immensely improved
#    a wrapper for ii and tmux
#    written by thomas berryhill <tb01110100@gmail.com>
#    under the mit license

source ~/.ii/config || { echo "config file ~/.ii/config not found, aborting" >&2; exit 1; }

# I apologize in advance for using hardcoded escape sequences
# I'll fix this later, I promise! <3
colorconvert() {
  case $1 in
    black) printf "\e[0;30m" ;;
    red) printf "\e[0;31m" ;;
    green) printf "\e[0;32m" ;;
    yellow) printf "\e[0;33m" ;;
    blue) printf "\e[0;34m" ;;
    magenta) printf "\e[0;35m" ;;
    cyan) printf "\e[0;36m" ;;
    white) printf "\e[0;37m" ;;
    black_bold) printf "\e[1;30m" ;;
    red_bold) printf "\e[1;31m" ;;
    green_bold) printf "\e[1;32m" ;;
    yellow_bold) printf "\e[1;33m" ;;
    blue_bold) printf "\e[1;34m" ;;
    magenta_bold) printf "\e[1;35m" ;;
    cyan_bold) printf "\e[1;36m" ;;
    white_bold) printf "\e[1;37m" ;;
    black_bg) printf "\e[0;40;30m" ;;
    red_bg) printf "\e[0;41;30m" ;;
    green_bg) printf "\e[0;42;30m" ;;
    yellow_bg) printf "\e[0;43;30m" ;;
    blue_bg) printf "\e[0;44;30m" ;;
    magenta_bg) printf "\e[0;45;30m" ;;
    cyan_bg) printf "\e[0;46;30m" ;;
    white_bg) printf "\e[0;47;30m" ;;
    end) printf "\e[0m" ;;
  esac; }

color1="$(colorconvert $nicks)"
color2="$(colorconvert $your_nick)"
color3="$(colorconvert $highlight)"
color4="$(colorconvert $action)"
color5="$(colorconvert $ui_accent)"
endcolor="$(colorconvert end)"

case $1 in
  help|-h|--help|"")
    cat << EOF

iiii 0.1
written by tb01110100

usage: iiii [command] [options]

  ${color5}help${endcolor} - display this message

  ${color5}start${endcolor} - start instances of ii

  ${color5}stop${endcolor} - kill ii

  ${color5}view | v <servername> #<channel>${endcolor} - show channel output and display an input
    example: iiii v freenode #archlinux

  ${color5}message | m <servername> #<channel>${endcolor} - show channel input
    example: iiii m freenode #archlinux

EOF
    exit ;;
  start)
  { for network in "${autoconnect[@]}"; do
      "$network"
      while true; do
        rm "$iidir/$host/in"
        echo "connecting to $host"
        ii -i "$iidir" -s "$host" -p "$port" -n "$nick" &
        iipid="$!"
        until [[ -p "$iidir/$host/in" ]]; do sleep .2; done
        echo "successfully connected to $host"
        if [[ -n "$nickpass" ]]; then
          echo "attempting to identify to ${host}'s nickserv"
          echo "/j nickserv identify $nickpass" > "$iidir/$host/in"
          sleep 10
        fi
        echo "joining channels: ${autojoins[*]}"
        printf "/j %s\n" "${autojoins[@]}" > "$iidir/$host/in"
        wait "$iipid"
        echo "connection to $host lost, attempting to reconnect"
      done &
      unset host port autojoins nick nickpass
      nick="$(whoami)"
    done; } &
    wait
    exit ;;
  stop)
    killall iiii ii
    exit ;;
  view|v)
    [[ -z "$TMUX" ]] && { echo "please run this in a tmux session" >&2; exit 1; }
    shift 1
    $1
    [[ "$(tmux display-message -p \#S)" != "ii" ]] && tmux rename-session ii
    tmux set status on 
    tmux set status-position top
    tmux set status-bg black
    tmux set status-fg $ui_accent
    tmux set status-left ""
    tmux set status-right ""
    tmux set status-justify centre
    tmux set mouse-select-window on
    tmux set pane-border-style fg=$ui_accent
    tmux set pane-active-border-style fg=$ui_accent
    tmux rename-window "$2"
    tmux split-window -l 2 "$0 m $1 \\$2"
    clear
    # adjust a few vars so sed can understand them without panicking
    sedcolor1=${color1//\[/\\\[}
    sedcolor2=${color2//\[/\\\[}
    sedendcolor=${endcolor//\[/\\\[}
    # note to self: DON'T TOUCH THESE NEXT FEW LINES EVER, EVER AGAIN
    tail -f -n 100 ~/.ii/"$host"/"$2"/out | sed -u \
      -e 's/[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\} \([0-9]\{2\}:[0-9]\{2\}\)/\1/g' \
      -e "s/<\([^>]*\)>/${color1}\1${endcolor}>/" \
      -e "s/$nick/${color2}&${endcolor}/g" \
      -e "s/^\([0-9]\{2\}:[0-9]\{2\} \)${sedcolor1}\(.*\)${sedendcolor}>\(.*\)${sedcolor2}$nick${sedendcolor}\(.*\)/\1${color3}\2${endcolor}>\3$nick\4/" \
      -e "s/ACTION \(.*\)/${color4}*\1*${endcolor}/" \
    | while read -r ln; do printf \\n%s "$ln"; done ;;
  message|m)
    shift 1
    $1
    while true; do
      history -c
      history -r ~/.ii/"$host"/"$2"/in-history
      clear
      echo -e "${color5}serv: $host  |  chan: $2  |  nick: $nick${endcolor}"
      read -e -r -p " >  " input_text
      echo "$input_text" | tee -a ~/.ii/"$host"/"$2"/in-history ~/.ii/"$host"/"$2"/in >/dev/null
    done ;;
esac
